defmodule Chunky.MathTest do
  use ExUnit.Case
  
  alias Chunky.Math
  doctest Chunky.Math
  
  describe "is_prime?/1" do
     
     test "first 100 primes" do
         [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
             83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,
             167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,
             257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,
             353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
             449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]
         |> Enum.each(
             fn prime -> 
                 assert Math.is_prime?(prime)
             end
         )
     end
     
     test "0" do
         assert Math.is_prime?(0) == false
     end
     
     test "1" do
         assert Math.is_prime?(1) == false
     end
     
     test "first 100 evens" do
         2..101
         |> Enum.map(fn i -> i * 2 end)
         |> Enum.each(
             fn e -> 
                 assert Math.is_prime?(e) == false
             end
         )
     end
     
     test "large even" do
         assert 234567887654323456789876543212345678765432345678765432345678765434 |> Math.is_prime?() == false
     end
     
     test "large prime" do
         assert 94366396730334173383107353049414959521528815310548187030165936229578960209523421808912459795329035203510284576187160076386643700441216547732914250578934261891510827140267043592007225160798348913639472564715055445201512461359359488795427875530231001298552452230535485049737222714000227878890892901228389026881    
         |> Math.is_prime?()
     end
     
     test "small semi-prime" do
         assert (104723 * 104729) |> Math.is_prime?() == false
     end
     
     test "large semi-prime" do
         
         p_a = 94366396730334173383107353049414959521528815310548187030165936229578960209523421808912459795329035203510284576187160076386643700441216547732914250578934261891510827140267043592007225160798348913639472564715055445201512461359359488795427875530231001298552452230535485049737222714000227878890892901228389026881
         p_b = 138028649176899647846076023812164793645371887571371559091892986639999096471811910222267538577825033963552683101137782650479906670021895135954212738694784814783986671046107023185842481502719762055887490765764329237651328922972514308635045190654896041748716218441926626988737664133219271115413563418353821396401
         is_p = (p_a * p_b) |> Math.is_prime?()
         assert (p_a * p_b) > p_a
         assert is_p == false
     end 
  end
end
